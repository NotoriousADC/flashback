###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        03/Aug/2024  15:00:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\mynec\DegreeWork\fb2\EXT\core\onfm.c
#    Command line =  
#        C:\Users\mynec\DegreeWork\fb2\EXT\core\onfm.c -D BOOT_LEVEL_2 -lcN
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\Debug\List -o
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\..\..\ -I
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\..\..\sys\lpc313x\bsp\ -I
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\..\..\sys\lpc313x\csp\ -I
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\..\..\sys\lpc313x\lib\ -I
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\..\..\sys\lpc313x\usb\
#        --cpu_mode thumb -Ol --use_c++_inline
#    List file    =  
#        C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\Debug\List\onfm.lst
#    Object file  =  C:\Users\mynec\DegreeWork\fb2\EXT\prj\iar\Debug\Obj\onfm.o
#
###############################################################################

C:\Users\mynec\DegreeWork\fb2\EXT\core\onfm.c
      1          /*********************************************************
      2           * Module name: onfm.c
      3           *
      4           * Copyright 2010, 2011. All Rights Reserved, Crane Chu.
      5           *
      6           * This file is part of OpenNFM.
      7           *
      8           * OpenNFM is free software: you can redistribute it and/or 
      9           * modify it under the terms of the GNU General Public 
     10           * License as published by the Free Software Foundation, 
     11           * either version 3 of the License, or (at your option) any 
     12           * later version.
     13           * 
     14           * OpenNFM is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied 
     16           * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     17           * PURPOSE. See the GNU General Public License for more 
     18           * details.
     19           *
     20           * You should have received a copy of the GNU General Public 
     21           * License along with OpenNFM. If not, see 
     22           * <http://www.gnu.org/licenses/>.
     23           *
     24           * First written on 2010-01-01 by cranechu@gmail.com
     25           *
     26           * Module Description:
     27           *    Buffer writing sectors in RAM (e.g. FIFO), until
     28           *    enough sectors to write as an MPP (multiple plane
     29           *    page), which can program parallelly. Also force to
     30           *    flush when stop or non-seqential writing happened.
     31           *
     32           *********************************************************/
     33          
     34          #include <core\inc\cmn.h>
     35          #include <core\inc\buf.h>
     36          #include <core\inc\ftl.h>
     37          #include <core\inc\ubi.h>
     38          #include <core\inc\mtd.h>
     39          #include <sys\sys.h>
     40          #include "sys\lpc313x\lib\lpc313x_chip.h"
     41          #define RAM_DISK_SECTOR_COUNT    (EXT_SDRAM_LENGTH/SECTOR_SIZE)
     42          
     43          #if (SIM_TEST == FALSE)
     44          #include <drv_uart.h>
     45          #else
     46          #include <core\ftl\ftl_inc.h>
     47          #endif
     48          
     49          #include <stdio.h>
     50          
     51          /* implement ONFM based on RAM, for bus debugging/testing */
     52          #define ONFM_RAMDISK         (FALSE)
     53          
     54          #if (ONFM_RAMDISK == FALSE || SIM_TEST == TRUE)
     55          
     56          static
     57          int onfm_read_sector(unsigned long sector_addr, void* sector_data);
     58          
     59          static
     60          int onfm_write_sector(unsigned long sector_addr, void* sector_data);
     61          
     62          #if defined(__ICCARM__)
     63          #pragma data_alignment=DMA_BURST_BYTES
     64          #endif
     65          static UINT8 onfm_read_buffer[MPP_SIZE];
     66          //static char uart_buf[64];
     67          static LSADDR read_buffer_start_sector;
     68          
     69          SECTOR* ram_disk = (SECTOR*) (EXT_SDRAM_BASE);
     70          
     71          /* called after failure init */
     72          int ONFM_Format() {
     73            STATUS ret;
     74                
     75            MTD_Init();  
     76            // DRAM.
     77            //memset(ram_disk, 0, RAM_DISK_SECTOR_COUNT * SECTOR_SIZE);
     78            
     79            uart_printf("%s: start\r\n",__func__);  
     80            ret = FTL_Format();
     81            if (ret == STATUS_SUCCESS) {
     82              return 0;
     83            } else {
     84              return -1;
     85            }
     86          }
     87          
     88          int ONFM_Capacity() {
     89          
     90            PGADDR page_count = FTL_Capacity() - 1;
     91            int ret;
     92            ret = page_count << SECTOR_PER_MPP_SHIFT;
     93          
     94             //2 test added by bochen
     95            /*
     96            UINT8 s[64];
     97            sprintf(s, "%s", "2 caculating the capacity\r\n");
     98            UartWrite(s, strlen(s));
     99            */
    100            return ret;
    101          }
    102          
    103          int ONFM_Mount() {
    104            STATUS ret;
    105          
    106            read_buffer_start_sector = INVALID_LSADDR;
    107          
    108            BUF_Init();
    109            MTD_Init();
    110          
    111             //1 for helloworld test by bochen
    112            /*
    113            unsigned char s[64];
    114            memset(s, 0, 64);
    115            sprintf(s, "1 ONFM_Mount(): USB is mounting ...:)\r\n");
    116            UartWrite(s, strlen(s));
    117            */
    118            uart_printf("%s: start\r\n",__func__);  
    119            
    120            ret = FTL_Init();
    121            if (ret == STATUS_SUCCESS) {
    122              return 0;
    123            } else {
    124              return -1;
    125            }
    126          }
    127          
    128          int ONFM_Read(unsigned long sector_addr, unsigned long sector_count,
    129                        void* sector_data) {
    130          
    131            unsigned long i;
    132            STATUS status;
    133            int ret = 0;
    134            
    135               // for helloworld test by bochen
    136           /* unsigned char s[64];
    137            memset(s, 0, 64);
    138            sprintf(s, "USB is reading ...\n\r");
    139            UartWrite(s, strlen(s));*/
    140          
    141            /* TODO: pre-read following page, pass back the pointer */
    142            if (sector_addr % SECTOR_PER_MPP == 0 && sector_count == SECTOR_PER_MPP) {
    143              /* read the full/aligned MPP directly, bypass the buffer read */
    144              status = FTL_Read(sector_addr >> SECTOR_PER_MPP_SHIFT, sector_data);
    145              if (status == STATUS_SUCCESS) {
    146                ret = 0;
    147              } else {
    148                ret = -1;
    149              }
    150            } else {
    151              for (i = 0; i < sector_count; i++) {
    152                if (ret == 0) {
    153                  ret = onfm_read_sector(sector_addr + i,
    154                                         ((UINT8*) sector_data) + SECTOR_SIZE * i);
    155                }
    156              }
    157            }
    158            ASSERT(ret == 0);
    159          
    160            return ret;
    161          }
    162          
    163          int ONFM_Write(unsigned long sector_addr, unsigned long sector_count,
    164                         void* sector_data) {
    165            unsigned long i;
    166            STATUS status;
    167            int ret = 0;
    168            //void* sec_DRAM_addr = NULL;
    169          
    170            
    171               // for helloworld test by bochen
    172           /* unsigned char s[64];
    173            memset(s, 0, 64);
    174            sprintf(s, "USB is writing ...\n\r");
    175            UartWrite(s, strlen(s));*/
    176            
    177            /* disable read buffer if something is written */
    178            read_buffer_start_sector = INVALID_LSADDR;
    179          
    180            if (sector_addr % SECTOR_PER_MPP == 0 && sector_count == SECTOR_PER_MPP) {
    181              // EXPERIMENT START
    182              unsigned long sec_addr = sector_addr % RAM_DISK_SECTOR_COUNT;
    183              if (sec_addr + sector_count >= RAM_DISK_SECTOR_COUNT) {
    184                sec_addr = 0;
    185              }
    186              /*sec_DRAM_addr = (void*) &(ram_disk[sec_addr][0]);
    187               memcpy(sec_DRAM_addr, sector_data, sector_count * SECTOR_SIZE);
    188               sprintf(uart_buf,"\n\rExperiment: Written sector %d at %p to %d at %p\n\r", sector_addr, sector_data, sec_addr, sec_DRAM_addr);
    189               UartWrite((unsigned char *)uart_buf,strlen(uart_buf));*/
    190              // EXPERIMENT STOP
    191              /* write the full/aligned MPP directly, bypass the buffer merge */
    192              status = FTL_Write(sector_addr >> SECTOR_PER_MPP_SHIFT, sector_data);
    193              if (status == STATUS_SUCCESS) {
    194                ret = 0;
    195              } else {
    196                ret = -1;
    197              }
    198            } else {
    199              for (i = 0; i < sector_count; i++) {
    200                if (ret == 0) {
    201                  ret = onfm_write_sector(sector_addr + i,
    202                                          ((UINT8*) sector_data) + SECTOR_SIZE * i);
    203                } else {
    204                  break;
    205                }
    206              }
    207          
    208              if (ret == 0) {
    209                /* flush the data in ram buffer */
    210                ret = onfm_write_sector((unsigned long) (-1), NULL);
    211              }
    212            }
    213          
    214            return ret;
    215          }
    216          
    217          int ONFM_Unmount() {
    218            int onfm_ret;
    219            STATUS ret;
    220          
    221             //3 for helloworld test by bochen
    222            /*
    223            unsigned char s[64];
    224            memset(s, 0, 64);
    225            sprintf(s, "3 USB is unmounting ...\n\r");
    226            UartWrite(s, strlen(s));
    227            */
    228            uart_printf("%s USB is unmounting ...\n\r", __func__);
    229            
    230            ret = FTL_Flush();
    231            if (ret == STATUS_SUCCESS) {
    232              onfm_ret = 0;
    233            } else {
    234              onfm_ret = -1;
    235            }
    236          
    237            return onfm_ret;
    238          }
    239          
    240          static
    241          int onfm_read_sector(unsigned long sector_addr, void* sector_data) {
    242            PGADDR page_addr;
    243            STATUS ret = STATUS_SUCCESS;
    244            if (sector_addr
    245                >= read_buffer_start_sector&& sector_addr < read_buffer_start_sector + SECTOR_PER_MPP) {
    246              ; /* no need to read from FTL, just get data from the read cache */
    247            } else {
    248              page_addr = sector_addr >> SECTOR_PER_MPP_SHIFT;
    249              ret = FTL_Read(page_addr, onfm_read_buffer);
    250              if (ret == STATUS_SUCCESS) {
    251                read_buffer_start_sector = page_addr << SECTOR_PER_MPP_SHIFT;
    252              }
    253            }
    254          
    255            if (ret == STATUS_SUCCESS && sector_data != NULL) {
    256              memcpy(
    257                  sector_data,
    258                  &(onfm_read_buffer[(sector_addr - read_buffer_start_sector)
    259                      * SECTOR_SIZE]),
    260                  SECTOR_SIZE);
    261          
    262              return 0;
    263            } else {
    264              read_buffer_start_sector = INVALID_LSADDR;
    265          
    266              return -1;
    267            }
    268          }
    269          
    270          static
    271          int onfm_write_sector(unsigned long sector_addr, void* sector_data) {
    272            static LSADDR starting_sector = INVALID_LSADDR;
    273            PGADDR page_addr = sector_addr >> SECTOR_PER_MPP_SHIFT;
    274            STATUS ret = STATUS_SUCCESS;
    275            void* buffer = NULL;
    276            if (starting_sector == INVALID_LSADDR) {
    277              if (sector_data != NULL) {
    278                starting_sector = page_addr << SECTOR_PER_MPP_SHIFT;
    279          
    280                /* write to buffer */
    281                BUF_PutSector(sector_addr, sector_data);
    282              } else {
    283                /* no data to flush. */
    284                ret = STATUS_SUCCESS;
    285              }
    286            } else if (sector_addr >= starting_sector&&
    287            sector_addr < starting_sector+SECTOR_PER_MPP &&
    288            sector_data != NULL) {
    289              /* write to buffer */
    290              BUF_PutSector(sector_addr, sector_data);
    291            } else {
    292              ASSERT(
    293                  sector_data == NULL || sector_addr == starting_sector + SECTOR_PER_MPP);
    294          
    295              /* flush the sectors in page buffer */
    296              BUF_GetPage(&page_addr, &buffer);
    297          
    298              /* write to FTL */
    299              ret = FTL_Write(page_addr, buffer);
    300              if (ret == STATUS_SUCCESS) {
    301                if (sector_data != NULL) {
    302                  /* fill buffers with next sector */
    303                  page_addr = sector_addr >> SECTOR_PER_MPP_SHIFT;
    304                  starting_sector = page_addr << SECTOR_PER_MPP_SHIFT;
    305          
    306                  /* write to buffer */
    307                  BUF_PutSector(sector_addr, sector_data);
    308                } else {
    309                  ASSERT(sector_addr == (unsigned long ) (-1));
    310                  starting_sector = INVALID_LSADDR;
    311                }
    312              }
    313            }
    314          
    315            if (ret == STATUS_SUCCESS) {
    316              return 0;
    317            } else {
    318              return -1;
    319            }
    320          }
    321          
    322          #else
    323          
    324          #include "sys\lpc313x\lib\lpc313x_chip.h"
    325          
    326          #define RAM_DISK_SECTOR_COUNT    (EXT_SDRAM_LENGTH/SECTOR_SIZE)
    327          
    328          SECTOR* ram_disk = (SECTOR*)(EXT_SDRAM_BASE);
    329          
    330          int ONFM_Format()
    331          {
    332            memset(ram_disk, 0, RAM_DISK_SECTOR_COUNT*SECTOR_SIZE);
    333          
    334            return 0;
    335          }
    336          
    337          int ONFM_Capacity()
    338          {
    339            return RAM_DISK_SECTOR_COUNT;
    340          }
    341          
    342          int ONFM_Mount()
    343          {
    344          //  sprintf(uart_buf,"\n\rONFM_Mount dummy called\n\r");
    345          //  UartWrite((unsigned char *)uart_buf,strlen(uart_buf));  
    346            memset(ram_disk, 0, RAM_DISK_SECTOR_COUNT*SECTOR_SIZE);
    347          
    348            return 0;
    349          }
    350          
    351          int ONFM_Read(unsigned long sector_addr,
    352              unsigned long sector_count,
    353              void* sector_data)
    354          {
    355            ASSERT(sector_addr+sector_count <= RAM_DISK_SECTOR_COUNT);
    356          
    357            memcpy(sector_data,
    358                &(ram_disk[sector_addr][0]),
    359                sector_count*SECTOR_SIZE);
    360          
    361            return 0;
    362          }
    363          
    364          int ONFM_Write(unsigned long sector_addr,
    365              unsigned long sector_count,
    366              void* sector_data)
    367          {
    368            ASSERT(sector_addr+sector_count <= RAM_DISK_SECTOR_COUNT);
    369          
    370            /* loop to cause a slow write */
    371            memcpy(&(ram_disk[sector_addr][0]),
    372                sector_data,
    373                sector_count*SECTOR_SIZE);
    374          
    375            BUF_Free(sector_data);
    376          
    377            return 0;
    378          }
    379          
    380          int ONFM_Unmount()
    381          {
    382            return 0;
    383          }
    384          
    385          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ONFM_Capacity
         8   -> FTL_Capacity
       8   ONFM_Format
         8   -> FTL_Format
         8   -> MTD_Init
         8   -> uart_printf
       8   ONFM_Mount
         8   -> BUF_Init
         8   -> FTL_Init
         8   -> MTD_Init
         8   -> uart_printf
      24   ONFM_Read
        24   -> FTL_Read
        24   -> onfm_read_sector
        24 __aeabi_uidivmod
       8   ONFM_Unmount
         8   -> FTL_Flush
         8   -> uart_printf
      24   ONFM_Write
        24   -> FTL_Write
        24   -> onfm_write_sector
        24 __aeabi_uidivmod
      16   onfm_read_sector
        16   -> FTL_Read
        16   -> __aeabi_memcpy
      24   onfm_write_sector
        24   -> BUF_GetPage
        24   -> BUF_PutSector
        24   -> FTL_Write
      40   printint
        40   -> UartWrite
        40 __aeabi_uidiv
        40 __aeabi_uidivmod
      56   printuint
        56   -> UartWrite
        56 __aeabi_uidiv
        56 __aeabi_uidivmod
      40   uart_printf
        40   -> UartWrite
        40   -> printint
        40   -> printuint


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable7
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       8  ?_0
      12  ?_1
      28  ?_2
      12  ONFM_Capacity
      36  ONFM_Format
      48  ONFM_Mount
      92  ONFM_Read
      32  ONFM_Unmount
     132  ONFM_Write
      20  digits
      20  digits
    2048  onfm_read_buffer
     106  onfm_read_sector
     200  onfm_write_sector
     104  printint
      64  printuint
       4  ram_disk
       4  read_buffer_start_sector
       4  starting_sector
     210  uart_printf
      40  -- Other

 
 2 052 bytes in section .bss
    48 bytes in section .data
    88 bytes in section .rodata
 1 080 bytes in section .text
 
 1 080 bytes of CODE  memory
    88 bytes of CONST memory
 2 100 bytes of DATA  memory

Errors: none
Warnings: none
